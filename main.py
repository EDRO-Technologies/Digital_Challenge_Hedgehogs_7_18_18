import os
import json
import sqlite3
import uuid
import telebot
from yookassa import Configuration, Payment
from datetime import datetime
from dotenv import load_dotenv
from cryptography.fernet import Fernet
import schedule
import time
import threading

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞
if ENCRYPTION_KEY:
    try:
        cipher_suite = Fernet(ENCRYPTION_KEY.encode())
        print("–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ENCRYPTION_KEY: {e}")
else:
    print("ENCRYPTION_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN_BOT = os.getenv("TOKEN_BOT")
ACCOUNT_ID = os.getenv("ACCOUNT_ID")
SECRET_KEY = os.getenv("SECRET_KEY")
ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
if not all([TOKEN_BOT, ACCOUNT_ID, SECRET_KEY, ENCRYPTION_KEY]):
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
cipher_suite = Fernet(ENCRYPTION_KEY.encode())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YooKassa
Configuration.account_id = ACCOUNT_ID
Configuration.secret_key = SECRET_KEY

bot = telebot.TeleBot(TOKEN_BOT)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

ADMIN_FILE = "admin_ids.json"

if os.path.exists(ADMIN_FILE):
    with open(ADMIN_FILE, "r") as f:
        ADMIN_IDS = json.load(f)
else:
    ADMIN_IDS = [466348470]


def is_admin(user_id):
    return user_id in ADMIN_IDS


def create_payment_for_all(amount, description):
    try:
        created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        con = sqlite3.connect("database/payments.db")

        cur = con.cursor()

        cur.execute("""
            INSERT INTO payments (description, amount, created_at)
            VALUES (?, ?, ?)
        """, (description, amount, created_at))

        cur.execute("DELETE FROM payment_users")

        users_con = sqlite3.connect("database/chats.db")
        users_cur = users_con.cursor()
        users_cur.execute("SELECT id FROM users")
        users = users_cur.fetchall()
        users_con.close()
        for (user_id,) in users:
            payment = Payment.create({
                "amount": {
                    "value": f"{amount:.2f}",
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": "https://t.me/profspay_bot/pay"
                },
                "capture": True,
                "description": description
            }, uuid.uuid4())
            print(1)

            confirmation_url = payment.confirmation.confirmation_url

            print(2)
            cur.execute("""
                INSERT INTO payment_users (user_id, status, payment_id, confirmation_url, amount, created_at, description)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                user_id, "pending", payment.id, confirmation_url, amount, created_at, description))

            bot.send_message(
                user_id,
                f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: https://t.me/profspay_bot/pay"
            )

        con.commit()
        con.close()

    except Exception as e:
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", 500


@bot.message_handler(commands=['start'])
def register_user(message):
    pic = open('database/start_pic.jpg', 'rb')
    bot.send_photo(message.chat.id, photo=pic,
                   caption="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–º –ø—Ä–æ—Ñ—Å–æ—é–∑–µ –°—É—Ä–ì–£! üöÄ \n\n  –ú—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ –≤ —É—á—ë–±–µ –∏ –∂–∏–∑–Ω–∏: "
                           "—Å–∫–∏–¥–∫–∏, –ø–æ–¥–∫–∞—Å—Ç—ã, –∫–æ–Ω–∫—É—Ä—Å—ã, –∑–∞—â–∏—Ç–∞ —Ç–≤–æ–∏—Ö –ø—Ä–∞–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞!\n\n–í—Å—Ç—É–ø–∏–≤ (3% "
                           "–æ—Ç —Å—Ç–∏–ø–µ–Ω–¥–∏–∏), –ø–æ–ª—É—á–∏—à—å –ª—å–≥–æ—Ç—ã –∏ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –°–ö–° –†–§. –ü—Ä–æ–π–¥–∏ –Ω–∞—à –æ–ø—Ä–æ—Å –∏ –æ–±—Ä–∞—Ç–∏—Å—å "
                           "–∫ –ø—Ä–æ—Ñ–æ—Ä–≥—É —Å–≤–æ–µ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è! ‚ù§Ô∏è\n\n "
                           "–û–ø—Ä–æ—Å: https://docs.google.com/forms/d/e/1FAIpQLSc-Qp5VzL529")
    try:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û:")
        bot.register_next_step_handler(message, get_full_name)
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        print(f"Error in /start: {e}")


def get_full_name(message):
    full_name = message.text.strip()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É:")
    bot.register_next_step_handler(message, get_group, full_name)


def get_group(message, full_name):
    group = message.text.strip()
    try:
        con = sqlite3.connect("database/chats.db")
        cur = con.cursor()
        cur.execute("""
        INSERT INTO users (id, full_name, group_name) 
        VALUES (?, ?, ?)
        """, (message.chat.id, full_name, group))
        con.commit()
        con.close()

        con = sqlite3.connect("database/payments.db")
        cur = con.cursor()
        cur.execute("""
        INSERT INTO payment_users (user_id, status) 
        VALUES (?, ?)
        """, (message.chat.id, "paid"))
        con.commit()
        con.close()
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        print(f"Error saving user to database: {e}")


@bot.message_handler(commands=['i_paid'])
def verify_payment(message):
    try:
        user_id = message.chat.id

        con = sqlite3.connect("database/payments.db")
        cur = con.cursor()
        cur.execute("""
            SELECT status, payment_id FROM payment_users WHERE user_id = ?
        """, (user_id,))
        user_payment = cur.fetchone()
        con.close()

        if not user_payment:
            bot.send_message(user_id, "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–µ–∫—É—â–µ–º—É –ø–ª–∞—Ç–µ–∂—É.")
            return

        status, payment_id = user_payment

        if status == "paid":
            bot.send_message(user_id, "–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–ª–∞—Ç—ë–∂.")
            return

        payment = Payment.find_one(payment_id)
        if payment.status == "succeeded":
            con = sqlite3.connect("database/payments.db")
            cur = con.cursor()
            cur.execute("""
                UPDATE payment_users
                SET status = 'paid'
                WHERE user_id = ?
            """, (user_id,))
            con.commit()
            con.close()

            bot.send_message(user_id, "–í–∞—à –ø–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –°–ø–∞—Å–∏–±–æ!")
            for admin_id in ADMIN_IDS:
                bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ–ø–ª–∞—Ç–∏–ª –ø–ª–∞—Ç—ë–∂.")
        else:
            bot.send_message(user_id, "–í–∞—à –ø–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
        print(f"Error in /i_paid: {e}")


@bot.message_handler(commands=['who_paid'])
def who_paid(message):
    try:
        if not is_admin(message.chat.id):
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        payments_con = sqlite3.connect("database/payments.db")
        payments_cur = payments_con.cursor()

        payments_cur.execute(
            "SELECT id, description, amount, created_at FROM payments ORDER BY created_at DESC LIMIT 1")
        payment = payments_cur.fetchone()

        if not payment:
            bot.send_message(message.chat.id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö.")
            payments_con.close()
            return

        payment_id, description, amount, created_at = payment

        payments_cur.execute("""
            SELECT user_id, status FROM payment_users
        """)
        payment_users = payments_cur.fetchall()
        payments_con.close()

        if not payment_users:
            bot.send_message(message.chat.id, "–ù–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–∫—É—â–µ–º—É –ø–ª–∞—Ç–µ–∂—É.")
            return

        chats_con = sqlite3.connect("database/chats.db")
        chats_cur = chats_con.cursor()

        user_details = {}
        chats_cur.execute("SELECT id, full_name FROM users")
        for user_id, full_name in chats_cur.fetchall():
            user_details[user_id] = full_name
        chats_con.close()

        paid_users = []
        pending_users = []
        for user_id, status in payment_users:
            name = user_details.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            if status == "paid":
                paid_users.append(f"{name} ({user_id})")
            else:
                pending_users.append(f"{name} ({user_id})")

        message_text = f"–ü–ª–∞—Ç—ë–∂:\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—É–º–º–∞: {amount} RUB\n–î–∞—Ç–∞: {created_at}\n\n"
        message_text += f"**–û–ø–ª–∞—Ç–∏–ª–∏:** ({len(paid_users)})\n" + (
            "\n".join(paid_users) if paid_users else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") + "\n\n"
        message_text += f"**–ù–µ –æ–ø–ª–∞—Ç–∏–ª–∏:** ({len(pending_users)})\n" + (
            "\n".join(pending_users) if pending_users else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        bot.send_message(message.chat.id, message_text)
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π.")
        print(f"Error in /who_paid: {e}")


def send_payment_reminders():
    try:
        con = sqlite3.connect("database/payments.db")
        cur = con.cursor()

        cur.execute("""
            SELECT id, description, amount, created_at FROM payments ORDER BY created_at DESC LIMIT 1
        """)
        payment = cur.fetchone()

        if not payment:
            print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return

        payment_id, description, amount, created_at = payment

        cur.execute("""
            SELECT user_id, confirmation_url FROM payment_users WHERE status = 'pending'
        """)
        pending_users = cur.fetchall()
        con.close()

        for user_id, confirmation_url in pending_users:
            bot.send_message(
                user_id,
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–ª–∞—Ç—ë–∂.\n"
                f"–°—É–º–º–∞: {amount} RUB\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {confirmation_url}"
            )
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {len(pending_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")


def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)


schedule.every(3).days.do(send_payment_reminders)

print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω!")

if __name__ == '__main__':
    bot.polling()
    threading.Thread(target=run_schedule, daemon=True).start()
